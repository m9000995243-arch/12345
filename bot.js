const { Telegraf, Markup } = require('telegraf');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

// ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// ===== –•–†–ê–ù–ò–õ–ò–©–ï =====
const userSessions = new Map(); // userId -> {userName, isWaitingForAdmin, history}
let adminState = { currentAction: null, selectedUser: null };

// ===== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–†–ï–ù–î–ï =====
const BRAND_INFO = {
  name: "Mortem Vellum",
  description: "–∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π",
  delivery: "–°–î–≠–ö, –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏, Boxberry, Avito –î–æ—Å—Ç–∞–≤–∫–∞ (2-5 –¥–Ω–µ–π)",
  phone: "+7 900 099 52 43",
  production: "—Ä—É—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è",
  warranty: "7 –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–∞–∫",
  payment: "100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∏–ª–∏ 50% + –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂",
  returnPolicy: "–≤–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–∞—à —Å—á–µ—Ç –ø—Ä–∏ –Ω–∞—à–µ–π –æ—à–∏–±–∫–µ"
};

// ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
const userKeyboard = Markup.keyboard([['üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']]).resize();
const adminMainKeyboard = Markup.keyboard([
  ['üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤', 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'],
  ['‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥']
]).resize();

const adminCancelKeyboard = Markup.keyboard([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']]).resize();

// ===== –£–ú–ù–´–ï –û–¢–í–ï–¢–´ =====
function getSmartResponse(question) {
  const lowerQuestion = question.toLowerCase();
  
  if (lowerQuestion.includes('–ø—Ä–∏–≤–µ—Ç') || lowerQuestion.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤')) {
    return `–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –±—Ä–µ–Ω–¥–∞ ${BRAND_INFO.name}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
  }
  
  if (lowerQuestion.includes('–¥–æ—Å—Ç–∞–≤') || lowerQuestion.includes('—Å—Ä–æ–∫') || lowerQuestion.includes('–ø–æ–ª—É—á')) {
    return `üöö ${BRAND_INFO.delivery}\n\n–ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.`;
  }
  
  if (lowerQuestion.includes('–æ–ø–ª–∞—Ç') || lowerQuestion.includes('—Ü–µ–Ω–∞') || lowerQuestion.includes('—Å—Ç–æ–∏–º')) {
    return `üí≥ ${BRAND_INFO.payment}\n\n–¶–µ–Ω—ã –æ—Ç 1500 –¥–æ 5000 —Ä—É–±–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏.`;
  }
  
  if (lowerQuestion.includes('–≥–∞—Ä–∞–Ω—Ç') || lowerQuestion.includes('–≤–æ–∑–≤—Ä–∞—Ç')) {
    return `üõ°Ô∏è ${BRAND_INFO.warranty}\n\n${BRAND_INFO.returnPolicy}`;
  }
  
  if (lowerQuestion.includes('–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤') || lowerQuestion.includes('–∫–∞—á–µ—Å—Ç–≤')) {
    return `üé® ${BRAND_INFO.production}\n\n–ö–∞–∂–¥–∞—è –≤–µ—â—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º.`;
  }
  
  if (lowerQuestion.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || lowerQuestion.includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) {
    return `üìû ${BRAND_INFO.phone}\n\n–ó–≤–æ–Ω–∏—Ç–µ –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ WhatsApp/Telegram.`;
  }
  
  if (lowerQuestion.includes('–±—Ä–µ–Ω–¥') || lowerQuestion.includes('mortem')) {
    return `üé≠ ${BRAND_INFO.name} - —ç—Ç–æ ${BRAND_INFO.description}.`;
  }
  
  if (lowerQuestion.includes('–∫–æ–ª–ª–µ–∫—Ü') || lowerQuestion.includes('–æ–¥–µ–∂–¥')) {
    return `üëï –£ –Ω–∞—Å –µ—Å—Ç—å —Ö—É–¥–∏, —Ñ—É—Ç–±–æ–ª–∫–∏ –∏ —Å–≤–∏—Ç—à–æ—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ç–∞–º–∏.`;
  }
  
  if (lowerQuestion.includes('—Ä–∞–∑–º–µ—Ä')) {
    return `üìè –ï—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã –æ—Ç S –¥–æ XL. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã.`;
  }
  
  return `–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º üëá`;
}

// ===== –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
bot.start((ctx) => {
  const userId = ctx.from.id.toString();
  const userName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!userSessions.has(userId)) {
    userSessions.set(userId, {
      userName: userName,
      isWaitingForAdmin: false,
      history: []
    });
  }
  
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –±—Ä–µ–Ω–¥–∞ ${BRAND_INFO.name}. üé≠\n\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º üëá`,
    userKeyboard
  );
});

bot.on('text', async (ctx) => {
  const userText = ctx.message.text;
  const userId = ctx.from.id.toString();
  const userName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
  if (userText === 'üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞') {
    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
    userSessions.set(userId, {
      userName: userName,
      isWaitingForAdmin: true,
      history: []
    });

    const adminMessage = 
`üîî –ù–û–í–´–ô –ó–ê–ü–†–û–° –û–¢ –ö–õ–ò–ï–ù–¢–ê!

üë§ –ò–º—è: ${userName}
üÜî ID: ${userId}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!`;

    try {
      await bot.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage, adminMainKeyboard);
      await ctx.reply('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.', userKeyboard);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', userKeyboard);
    }
    return;
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞ - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
  const userSession = userSessions.get(userId);
  if (userSession && userSession.isWaitingForAdmin) {
    const adminMessage = 
`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (ID: ${userId}):

${userText}

üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"`;

    try {
      await bot.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage, adminMainKeyboard);
      await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.', userKeyboard);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.', userKeyboard);
    }
    return;
  }

  // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  try {
    const response = getSmartResponse(userText);
    await ctx.reply(response, userKeyboard);
    
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', userKeyboard);
  }
});

// ===== –î–õ–Ø –ê–î–ú–ò–ù–ê =====

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.command('admin', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_CHAT_ID) {
    return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
  
  showAdminPanel(ctx);
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function showAdminPanel(ctx) {
  const waitingUsers = Array.from(userSessions.entries())
    .filter(([id, session]) => session.isWaitingForAdmin);
  
  let message = `üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n`;
  message += `‚è≥ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: ${waitingUsers.length}\n`;
  message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userSessions.size}\n\n`;
  
  if (waitingUsers.length > 0) {
    message += `üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞:\n`;
    waitingUsers.forEach(([userId, session], index) => {
      message += `${index + 1}. ${session.userName} (ID: ${userId})\n`;
    });
  } else {
    message += `üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤`;
  }
  
  ctx.reply(message, adminMainKeyboard);
  adminState = { currentAction: null, selectedUser: null };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
bot.on('text', async (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_CHAT_ID) return;
  
  const text = ctx.message.text;
  
  // –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤"
  if (text === 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤') {
    showAdminPanel(ctx);
    return;
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
  if (text === 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é') {
    const waitingUsers = Array.from(userSessions.entries())
      .filter(([id, session]) => session.isWaitingForAdmin);
    
    if (waitingUsers.length === 0) {
      return ctx.reply('üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞', adminMainKeyboard);
    }
    
    adminState.currentAction = 'select_user_for_reply';
    
    let message = `üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞:\n\n`;
    waitingUsers.forEach(([userId, session], index) => {
      message += `${index + 1}. ${session.userName} (ID: ${userId})\n`;
    });
    
    message += `\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1, 2, 3...)`;
    
    await ctx.reply(message, adminCancelKeyboard);
    return;
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
  if (text === '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥') {
    const waitingUsers = Array.from(userSessions.entries())
      .filter(([id, session]) => session.isWaitingForAdmin);
    
    if (waitingUsers.length === 0) {
      return ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', adminMainKeyboard);
    }
    
    adminState.currentAction = 'select_user_for_end';
    
    let message = `‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:\n\n`;
    waitingUsers.forEach(([userId, session], index) => {
      message += `${index + 1}. ${session.userName} (ID: ${userId})\n`;
    });
    
    message += `\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞`;
    
    await ctx.reply(message, adminCancelKeyboard);
    return;
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
  if (text === '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞') {
    adminState = { currentAction: null, selectedUser: null };
    showAdminPanel(ctx);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  if (adminState.currentAction === 'select_user_for_reply') {
    const userNumber = parseInt(text);
    const waitingUsers = Array.from(userSessions.entries())
      .filter(([id, session]) => session.isWaitingForAdmin);
    
    if (isNaN(userNumber) || userNumber < 1 || userNumber > waitingUsers.length) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', adminCancelKeyboard);
    }
    
    const [userId, userSession] = waitingUsers[userNumber - 1];
    adminState = { 
      currentAction: 'waiting_reply_message', 
      selectedUser: userId 
    };
    
    await ctx.reply(
      `üí¨ –û—Ç–≤–µ—Ç –¥–ª—è: ${userSession.userName} (ID: ${userId})\n\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:`,
      adminCancelKeyboard
    );
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (adminState.currentAction === 'waiting_reply_message') {
    const userId = adminState.selectedUser;
    
    if (!userSessions.has(userId)) {
      adminState = { currentAction: null, selectedUser: null };
      return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω', adminMainKeyboard);
    }
    
    const userSession = userSessions.get(userId);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.telegram.sendMessage(
        userId, 
        `üë®‚Äçüíº –û—Ç–≤–µ—Ç –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n${text}`,
        userKeyboard
      );
      
      await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${userSession.userName}`, adminMainKeyboard);
      
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`, adminMainKeyboard);
      userSessions.delete(userId); // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    
    adminState = { currentAction: null, selectedUser: null };
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
  if (adminState.currentAction === 'select_user_for_end') {
    const userNumber = parseInt(text);
    const waitingUsers = Array.from(userSessions.entries())
      .filter(([id, session]) => session.isWaitingForAdmin);
    
    if (isNaN(userNumber) || userNumber < 1 || userNumber > waitingUsers.length) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', adminCancelKeyboard);
    }
    
    const [userId, userSession] = waitingUsers[userNumber - 1];
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      await bot.telegram.sendMessage(
        userId, 
        'üí¨ –î–∏–∞–ª–æ–≥ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"',
        userKeyboard
      );
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
    }
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    userSessions.delete(userId);
    
    await ctx.reply(`‚úÖ –î–∏–∞–ª–æ–≥ —Å ${userSession.userName} –∑–∞–≤–µ—Ä—à–µ–Ω`, adminMainKeyboard);
    adminState = { currentAction: null, selectedUser: null };
    return;
  }
  
  // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  showAdminPanel(ctx);
});

// ===== –ó–ê–ü–£–°–ö =====
bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  console.log('üë®‚Äçüíº –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞: /admin');
}).catch((error) => {
  console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
});

app.get('/', (req, res) => {
  res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
