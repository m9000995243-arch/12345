const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

// ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const HUGGING_FACE_TOKEN = process.env.HUGGING_FACE_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// ===== –•–†–ê–ù–ò–õ–ò–©–ï –î–ê–ù–ù–´–• =====
const userSessions = new Map(); // userId -> {userName, history, isActive}
const adminState = new Map(); // adminId -> {currentAction, selectedUser}

// ===== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–†–ï–ù–î–ï =====
const BRAND_INFO = `
–¢—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±—Ä–µ–Ω–¥–∞ –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–æ–π –æ–¥–µ–∂–¥—ã "Mortem Vellum".
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏ —É—Å–ª—É–≥–∞—Ö.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–†–ï–ù–î–ï:
- –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ç–∞–º–∏
- –î–æ—Å—Ç–∞–≤–∫–∞: –°–î–≠–ö, –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏, Boxberry (2-5 –¥–Ω–µ–π)
- –¢–µ–ª–µ—Ñ–æ–Ω: +7 900 099 52 43
- –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: —Ä—É—á–Ω–æ–µ, —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è
- –ì–∞—Ä–∞–Ω—Ç–∏—è: 7 –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–∞–∫
- –û–ø–ª–∞—Ç–∞: 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∏–ª–∏ 50% + –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
- –í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–∞—à —Å—á–µ—Ç –ø—Ä–∏ –Ω–∞—à–µ–π –æ—à–∏–±–∫–µ
- –†–∞–∑–º–µ—Ä—ã: S, M, L, XL
- –¶–µ–Ω—ã: –æ—Ç 1500 –¥–æ 5000 —Ä—É–±–ª–µ–π

–û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ - –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å.
`;

// ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
const userKeyboard = Markup.keyboard([['üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']]).resize();

const adminMainKeyboard = Markup.keyboard([
  ['üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤', 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'],
  ['‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å']
]).resize();

// ===== –§–£–ù–ö–¶–ò–Ø –ù–ï–ô–†–û–°–ï–¢–ò =====
async function askAI(question, userId) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const lowerQuestion = question.toLowerCase();
    
    if (lowerQuestion.includes('–¥–æ—Å—Ç–∞–≤')) {
      return 'üöö –î–æ—Å—Ç–∞–≤–∫–∞: –°–î–≠–ö, –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏, Boxberry (2-5 –¥–Ω–µ–π). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.';
    }
    
    if (lowerQuestion.includes('–æ–ø–ª–∞—Ç') || lowerQuestion.includes('—Ü–µ–Ω–∞')) {
      return 'üí≥ –û–ø–ª–∞—Ç–∞: 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ 50% + –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂. –¶–µ–Ω—ã –æ—Ç 1500 –¥–æ 5000 —Ä—É–±–ª–µ–π.';
    }
    
    if (lowerQuestion.includes('–≥–∞—Ä–∞–Ω—Ç') || lowerQuestion.includes('–≤–æ–∑–≤—Ä–∞—Ç')) {
      return 'üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è 7 –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–∞–∫. –í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–∞—à —Å—á–µ—Ç –ø—Ä–∏ –Ω–∞—à–µ–π –æ—à–∏–±–∫–µ.';
    }
    
    if (lowerQuestion.includes('—Ä–∞–∑–º–µ—Ä')) {
      return 'üìè –†–∞–∑–º–µ—Ä—ã: S, M, L, XL. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã.';
    }
    
    if (lowerQuestion.includes('–ø—Ä–∏–≤–µ—Ç') || lowerQuestion.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤')) {
      return '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ Mortem Vellum. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    if (!HUGGING_FACE_TOKEN) {
      return '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.';
    }

    const API_URL = "https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium";
    const headers = { 
      "Authorization": `Bearer ${HUGGING_FACE_TOKEN}` 
    };

    const context = `${BRAND_INFO}\n\n–í–æ–ø—Ä–æ—Å: ${question}\n–û—Ç–≤–µ—Ç:`;
    
    const payload = {
      "inputs": context,
      "parameters": {
        "max_length": 200,
        "temperature": 0.7
      }
    };
    
    const response = await axios.post(API_URL, payload, { headers, timeout: 10000 });
    
    if (response.status === 200 && response.data && response.data[0]?.generated_text) {
      let answer = response.data[0].generated_text;
      
      // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
      if (answer.includes('–û—Ç–≤–µ—Ç:')) {
        answer = answer.split('–û—Ç–≤–µ—Ç:')[1]?.trim() || answer;
      }
      
      return answer.slice(0, 400);
    }
    
    return '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.';
    
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error.message);
    return '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.';
  }
}

// ===== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
bot.start((ctx) => {
  const userId = ctx.from.id;
  const userName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userSessions.set(userId.toString(), {
    userName: userName,
    history: [],
    isActive: true,
    lastActivity: Date.now()
  });
  
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –±—Ä–µ–Ω–¥–∞ Mortem Vellum. üé≠\n\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–π –æ–¥–µ–∂–¥–µ, –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –æ–ø–ª–∞—Ç–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`,
    userKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on('text', async (ctx) => {
  const userText = ctx.message.text;
  const userId = ctx.from.id.toString();
  const userName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
  if (!userSessions.has(userId)) {
    userSessions.set(userId, {
      userName: userName,
      history: [],
      isActive: true,
      lastActivity: Date.now()
    });
  }

  const userSession = userSessions.get(userId);
  userSession.lastActivity = Date.now();

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
  if (userText === 'üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞') {
    userSession.isActive = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    
    const adminMessage = 
`üîî –ù–û–í–´–ô –ó–ê–ü–†–û–° –û–¢ –ö–õ–ò–ï–ù–¢–ê!

üë§ –ò–º—è: ${userSession.userName}
üÜî ID: ${userId}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üí¨ –ò—Å—Ç–æ—Ä–∏—è: ${userSession.history.length} —Å–æ–æ–±—â–µ–Ω–∏–π

–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/r_${userId} –≤–∞—à —Ç–µ–∫—Å—Ç

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"`;

    try {
      await bot.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage, adminMainKeyboard);
      await ctx.reply('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω! –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', userKeyboard);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', userKeyboard);
    }
    return;
  }

  // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
  try {
    const response = await askAI(userText, userId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    userSession.history.push({
      question: userText,
      answer: response,
      timestamp: Date.now(),
      fromAI: true
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (userSession.history.length > 10) {
      userSession.history = userSession.history.slice(-10);
    }
    
    await ctx.reply(response, userKeyboard);
    
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.', userKeyboard);
  }
});

// ===== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ê =====

// –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞
bot.command('admin', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_CHAT_ID) {
    return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
  
  showAdminPanel(ctx);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
bot.command('r_', (ctx) => {
  if (ctx.from.id.toString() !== ADMIN_CHAT_ID) return;
  
  const commandText = ctx.message.text;
  const parts = commandText.split(' ');
  
  if (parts.length < 3) {
    return ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /r_ID_USER –≤–∞—à —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞', adminMainKeyboard);
  }
  
  const userId = parts[0].replace('/r_', '');
  const message = parts.slice(1).join(' ');
  
  replyToUser(ctx, userId, message);
});

// –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function showAdminPanel(ctx) {
  const activeUsers = Array.from(userSessions.entries())
    .filter(([id, session]) => session.isActive)
    .length;
  
  ctx.reply(
    `üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n` +
    `üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers}\n` +
    `üë• –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${userSessions.size}\n\n` +
    `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n` +
    `/r_ID —Ç–µ–∫—Å—Ç - –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç\n` +
    `/admin - –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–Ω–µ–ª—å`,
    adminMainKeyboard
  );
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function replyToUser(ctx, userId, message) {
  if (!userSessions.has(userId)) {
    return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', adminMainKeyboard);
  }
  
  const userSession = userSessions.get(userId);
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.telegram.sendMessage(
      userId, 
      `üë®‚Äçüíº –û—Ç–≤–µ—Ç –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n${message}`,
      userKeyboard
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    userSession.history.push({
      question: '–û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
      answer: message,
      timestamp: Date.now(),
      fromAI: false
    });
    
    userSession.isActive = true;
    
    await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${userSession.userName} (ID: ${userId})`, adminMainKeyboard);
    
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${userId}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`, adminMainKeyboard);
    userSessions.delete(userId); // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  }
}

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù–ê =====
bot.on('text', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
  if (ctx.from.id.toString() !== ADMIN_CHAT_ID) return;
  
  const text = ctx.message.text;
  
  // –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤"
  if (text === 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤') {
    const activeUsers = Array.from(userSessions.entries())
      .filter(([id, session]) => session.isActive);
    
    if (activeUsers.length === 0) {
      return ctx.reply('üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç', adminMainKeyboard);
    }
    
    let message = `üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: ${activeUsers.length}\n\n`;
    
    activeUsers.forEach(([userId, session], index) => {
      message += `${index + 1}. üë§ ${session.userName}\n`;
      message += `   üÜî ${userId}\n`;
      message += `   üí¨ ${session.history.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`;
      message += `   ‚è∞ ${new Date(session.lastActivity).toLocaleTimeString('ru-RU')}\n`;
      message += `   ‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å: /r_${userId} –≤–∞—à —Ç–µ–∫—Å—Ç\n\n`;
    });
    
    message += 'üí° –î–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /r_ID —Ç–µ–∫—Å—Ç';
    
    await ctx.reply(message, adminMainKeyboard);
    return;
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
  if (text === 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é') {
    const activeUsers = Array.from(userSessions.entries())
      .filter(([id, session]) => session.isActive);
    
    if (activeUsers.length === 0) {
      return ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞', adminMainKeyboard);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    adminState.set(ADMIN_CHAT_ID, { currentAction: 'waiting_user_select' });
    
    let message = `üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞:\n\n`;
    
    activeUsers.forEach(([userId, session], index) => {
      message += `${index + 1}. ${session.userName} (ID: ${userId})\n`;
    });
    
    message += `\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1, 2, 3...)`;
    
    await ctx.reply(message, Markup.keyboard([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']]).resize());
    return;
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
  if (text === '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥') {
    const activeUsers = Array.from(userSessions.entries())
      .filter(([id, session]) => session.isActive);
    
    if (activeUsers.length === 0) {
      return ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', adminMainKeyboard);
    }
    
    adminState.set(ADMIN_CHAT_ID, { currentAction: 'waiting_end_dialog' });
    
    let message = `‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞:\n\n`;
    
    activeUsers.forEach(([userId, session], index) => {
      message += `${index + 1}. ${session.userName} (ID: ${userId})\n`;
    });
    
    message += `\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞`;
    
    await ctx.reply(message, Markup.keyboard([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']]).resize());
    return;
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å"
  if (text === 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å') {
    showAdminPanel(ctx);
    return;
  }
  
  // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
  if (text === '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞') {
    adminState.delete(ADMIN_CHAT_ID);
    showAdminPanel(ctx);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
  const adminSession = adminState.get(ADMIN_CHAT_ID);
  if (adminSession) {
    if (adminSession.currentAction === 'waiting_user_select') {
      const userNumber = parseInt(text);
      const activeUsers = Array.from(userSessions.entries())
        .filter(([id, session]) => session.isActive);
      
      if (isNaN(userNumber) || userNumber < 1 || userNumber > activeUsers.length) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', Markup.keyboard([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']]).resize());
      }
      
      const [userId, userSession] = activeUsers[userNumber - 1];
      adminState.set(ADMIN_CHAT_ID, { 
        currentAction: 'waiting_reply_message', 
        selectedUser: userId 
      });
      
      let historyText = 'üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n\n';
      userSession.history.slice(-5).forEach((msg, index) => {
        const prefix = msg.fromAI ? 'ü§ñ' : 'üë§';
        historyText += `${prefix} ${msg.question}\n`;
        if (msg.answer) {
          historyText += `üí° ${msg.answer}\n\n`;
        }
      });
      
      await ctx.reply(
        `üí¨ –û—Ç–≤–µ—Ç –¥–ª—è: ${userSession.userName} (ID: ${userId})\n\n${historyText}üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:`,
        Markup.keyboard([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']]).resize()
      );
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (adminSession.currentAction === 'waiting_reply_message') {
      const userId = adminSession.selectedUser;
      await replyToUser(ctx, userId, text);
      adminState.delete(ADMIN_CHAT_ID);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    if (adminSession.currentAction === 'waiting_end_dialog') {
      const userNumber = parseInt(text);
      const activeUsers = Array.from(userSessions.entries())
        .filter(([id, session]) => session.isActive);
      
      if (isNaN(userNumber) || userNumber < 1 || userNumber > activeUsers.length) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', Markup.keyboard([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']]).resize());
      }
      
      const [userId, userSession] = activeUsers[userNumber - 1];
      userSession.isActive = false; // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      
      await ctx.reply(`‚úÖ –î–∏–∞–ª–æ–≥ —Å ${userSession.userName} (ID: ${userId}) –∑–∞–≤–µ—Ä—à–µ–Ω`, adminMainKeyboard);
      adminState.delete(ADMIN_CHAT_ID);
      return;
    }
  }
  
  // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  showAdminPanel(ctx);
});

// ===== –ó–ê–ü–£–°–ö =====
bot.launch().then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  console.log('üë®‚Äçüíº –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞: /admin');
}).catch((error) => {
  console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
});

app.get('/', (req, res) => {
  res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
