const { Telegraf, Markup } = require('telegraf');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

// ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// ===== –•–†–ê–ù–ò–õ–ò–©–ï =====
const activeUsers = new Map(); // userId -> {userName, chatId}
let adminState = { currentAction: null, selectedUser: null };

// ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
const mainKeyboard = Markup.keyboard([
    ['üöö –î–æ—Å—Ç–∞–≤–∫–∞', 'üîÑ –í–æ–∑–≤—Ä–∞—Ç'],
    ['üì¶ –ö–∞—Ç–∞–ª–æ–≥', 'üè¢ –û –±—Ä–µ–Ω–¥–µ'],
    ['üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å']
]).resize();

const adminKeyboard = Markup.keyboard([
    ['üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É', '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'],
    ['üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤']
]).resize();

const adminCancelKeyboard = Markup.keyboard([['‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞']]).resize();

// ===== –¢–ï–ö–°–¢ –î–õ–Ø –ö–ù–û–ü–û–ö (–ó–ê–ü–û–õ–ù–ò –≠–¢–û –°–ê–ú) =====

// === –ó–ê–ü–û–õ–ù–ò –≠–¢–û–¢ –¢–ï–ö–°–¢ ===
const DELIVERY_TEXT = `
üöö –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–ê–í–ö–ï

[–ó–î–ï–°–¨ –¢–í–û–ô –¢–ï–ö–°–¢ –û –î–û–°–¢–ê–í–ö–ï]
–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ä–æ–∫–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏
`;

const RETURN_TEXT = `
üîÑ –£–°–õ–û–í–ò–Ø –í–û–ó–í–†–ê–¢–ê

[–ó–î–ï–°–¨ –¢–í–û–ô –¢–ï–ö–°–¢ –û –í–û–ó–í–†–ê–¢–ï]
–ù–∞–ø—Ä–∏–º–µ—Ä: —É—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞, —Å—Ä–æ–∫–∏, –ø—Ä–æ—Ü–µ–¥—É—Ä–∞
`;

const CATALOG_TEXT = `
üì¶ –ù–ê–® –ö–ê–¢–ê–õ–û–ì

[–ó–î–ï–°–¨ –¢–í–û–ô –¢–ï–ö–°–¢ –û –ö–ê–¢–ê–õ–û–ì–ï]
–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–æ–≤–∏–Ω–∫–∏, —Ö–∏—Ç—ã –ø—Ä–æ–¥–∞–∂
`;

const ABOUT_TEXT = `
üè¢ –û –ù–ê–®–ï–ú –ë–†–ï–ù–î–ï

[–ó–î–ï–°–¨ –¢–í–û–ô –¢–ï–ö–°–¢ –û –ë–†–ï–ù–î–ï]
–ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –±—Ä–µ–Ω–¥–∞, –∏—Å—Ç–æ—Ä–∏—è, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
`;
// === –ö–û–ù–ï–¶ –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø ===

// ===== –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
bot.start((ctx) => {
    ctx.reply(
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:`,
        mainKeyboard
    );
});

bot.hears('üöö –î–æ—Å—Ç–∞–≤–∫–∞', (ctx) => {
    ctx.reply(DELIVERY_TEXT, mainKeyboard);
});

bot.hears('üîÑ –í–æ–∑–≤—Ä–∞—Ç', (ctx) => {
    ctx.reply(RETURN_TEXT, mainKeyboard);
});

bot.hears('üì¶ –ö–∞—Ç–∞–ª–æ–≥', (ctx) => {
    ctx.reply(CATALOG_TEXT, mainKeyboard);
});

bot.hears('üè¢ –û –±—Ä–µ–Ω–¥–µ', (ctx) => {
    ctx.reply(ABOUT_TEXT, mainKeyboard);
});

bot.hears('üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', async (ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const username = ctx.from.username ? `@${ctx.from.username}` : '–Ω–µ—Ç username';

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    activeUsers.set(userId.toString(), {
        userName: userName,
        chatId: ctx.chat.id,
        username: username
    });

    // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    const adminMessage = 
`üîî –ù–û–í–´–ô –ó–ê–ü–†–û–° –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò!

üë§ –ò–º—è: ${userName}
üì± Username: ${username}
üÜî ID: ${userId}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞!`;

    try {
        await bot.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage, adminKeyboard);
        await ctx.reply('‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', mainKeyboard);
    } catch (error) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainKeyboard);
    }
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞
bot.on('text', async (ctx) => {
    const userId = ctx.from.id.toString();
    const userText = ctx.message.text;
    const userName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if (activeUsers.has(userId) && !userText.startsWith('/')) {
        const adminMessage = 
`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (ID: ${userId}):

${userText}

üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"`;

        try {
            await bot.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage, adminKeyboard);
            await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.', mainKeyboard);
        } catch (error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏.', mainKeyboard);
        }
    }
});

// ===== –î–õ–Ø –ê–î–ú–ò–ù–ê =====

// –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
bot.command('admin', (ctx) => {
    if (ctx.from.id.toString() !== ADMIN_CHAT_ID) {
        return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }
    showAdminPanel(ctx);
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function showAdminPanel(ctx) {
    const activeCount = activeUsers.size;
    
    let message = `üë®‚Äçüíº –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n`;
    message += `üë• –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${activeCount}\n\n`;
    
    if (activeCount > 0) {
        message += `üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:\n`;
        let counter = 1;
        activeUsers.forEach((user, userId) => {
            message += `${counter}. ${user.userName} (${user.username})\n`;
            counter++;
        });
    } else {
        message += `üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤`;
    }
    
    ctx.reply(message, adminKeyboard);
    adminState = { currentAction: null, selectedUser: null };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
bot.on('text', async (ctx) => {
    if (ctx.from.id.toString() !== ADMIN_CHAT_ID) return;
    
    const text = ctx.message.text;

    // –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"
    if (text === 'üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤') {
        showAdminPanel(ctx);
        return;
    }

    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"
    if (text === 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É') {
        if (activeUsers.size === 0) {
            return ctx.reply('üì≠ –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞', adminKeyboard);
        }

        adminState.currentAction = 'select_user_for_reply';
        
        let message = `üí¨ –í–´–ë–ï–†–ò–¢–ï –ö–õ–ò–ï–ù–¢–ê –î–õ–Ø –û–¢–í–ï–¢–ê:\n\n`;
        let counter = 1;
        activeUsers.forEach((user, userId) => {
            message += `${counter}. ${user.userName} (${user.username})\n`;
            counter++;
        });
        
        message += `\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ (1, 2, 3...)`;
        
        await ctx.reply(message, adminCancelKeyboard);
        return;
    }

    // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    if (text === '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥') {
        if (activeUsers.size === 0) {
            return ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤', adminKeyboard);
        }

        adminState.currentAction = 'select_user_for_end';
        
        let message = `‚ùå –ó–ê–í–ï–†–®–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê:\n\n`;
        let counter = 1;
        activeUsers.forEach((user, userId) => {
            message += `${counter}. ${user.userName} (${user.username})\n`;
            counter++;
        });
        
        message += `\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞`;
        
        await ctx.reply(message, adminCancelKeyboard);
        return;
    }

    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    if (text === '‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞') {
        adminState = { currentAction: null, selectedUser: null };
        showAdminPanel(ctx);
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if (adminState.currentAction === 'select_user_for_reply') {
        const userNumber = parseInt(text);
        
        if (isNaN(userNumber) || userNumber < 1 || userNumber > activeUsers.size) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', adminCancelKeyboard);
        }

        // –ü–æ–ª—É—á–∞–µ–º userId –ø–æ –Ω–æ–º–µ—Ä—É
        const usersArray = Array.from(activeUsers.entries());
        const [userId, userData] = usersArray[userNumber - 1];
        
        adminState = {
            currentAction: 'waiting_reply_message',
            selectedUser: userId
        };

        await ctx.reply(
            `üí¨ –û–¢–í–ï–¢ –î–õ–Ø: ${userData.userName} (${userData.username})\n\nüìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:`,
            adminCancelKeyboard
        );
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    if (adminState.currentAction === 'waiting_reply_message') {
        const userId = adminState.selectedUser;
        
        if (!activeUsers.has(userId)) {
            adminState = { currentAction: null, selectedUser: null };
            return ctx.reply('‚ùå –ö–ª–∏–µ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω', adminKeyboard);
        }

        const userData = activeUsers.get(userId);
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await bot.telegram.sendMessage(
                userId,
                `üë®‚Äçüíº –û—Ç–≤–µ—Ç –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n${text}`,
                mainKeyboard
            );
            
            await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${userData.userName}`, adminKeyboard);
            
        } catch (error) {
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`, adminKeyboard);
            activeUsers.delete(userId); // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        }
        
        adminState = { currentAction: null, selectedUser: null };
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    if (adminState.currentAction === 'select_user_for_end') {
        const userNumber = parseInt(text);
        
        if (isNaN(userNumber) || userNumber < 1 || userNumber > activeUsers.size) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', adminCancelKeyboard);
        }

        // –ü–æ–ª—É—á–∞–µ–º userId –ø–æ –Ω–æ–º–µ—Ä—É –∏ —É–¥–∞–ª—è–µ–º
        const usersArray = Array.from(activeUsers.entries());
        const [userId, userData] = usersArray[userNumber - 1];
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        try {
            await bot.telegram.sendMessage(
                userId,
                'üí¨ –î–∏–∞–ª–æ–≥ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"',
                mainKeyboard
            );
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        activeUsers.delete(userId);
        
        await ctx.reply(`‚úÖ –î–∏–∞–ª–æ–≥ —Å ${userData.userName} –∑–∞–≤–µ—Ä—à–µ–Ω`, adminKeyboard);
        adminState = { currentAction: null, selectedUser: null };
        return;
    }

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    showAdminPanel(ctx);
});

// ===== –ó–ê–ü–£–°–ö =====
bot.launch().then(() => {
    console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    console.log('üë®‚Äçüíº –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞: /admin');
}).catch((error) => {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
});

app.get('/', (req, res) => {
    res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
