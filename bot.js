const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

// ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const HUGGING_FACE_TOKEN = process.env.HUGGING_FACE_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

// ===== –•–†–ê–ù–ò–õ–ò–©–ï =====
let activeUsers = []; // [{id, name, history}]

// ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
const userKeyboard = Markup.keyboard([['üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']]).resize();
const adminKeyboard = Markup.keyboard([
    ['üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'],
    ['üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫']
]).resize();

// ===== –ù–ï–ô–†–û–°–ï–¢–¨ =====
async function askAI(question) {
    try {
        if (!HUGGING_FACE_TOKEN) {
            return getSimpleResponse(question);
        }

        const BRAND_INFO = `
        –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –±—Ä–µ–Ω–¥–∞ –æ–¥–µ–∂–¥—ã "Mortem Vellum". –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–µ–Ω–¥–µ:
        - –ö–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ç–∞–º–∏
        - –î–æ—Å—Ç–∞–≤–∫–∞: –°–î–≠–ö, –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏, Boxberry (2-5 –¥–Ω–µ–π)
        - –¢–µ–ª–µ—Ñ–æ–Ω: +7 900 099 52 43
        - –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: —Ä—É—á–Ω–æ–µ, —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è
        - –ì–∞—Ä–∞–Ω—Ç–∏—è: 7 –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–∞–∫
        - –û–ø–ª–∞—Ç–∞: 100% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∏–ª–∏ 50% + –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        - –†–∞–∑–º–µ—Ä—ã: S, M, L, XL
        - –¶–µ–Ω—ã: –æ—Ç 1500 –¥–æ 5000 —Ä—É–±–ª–µ–π
        
        –í–æ–ø—Ä–æ—Å: ${question}
        –û—Ç–≤–µ—Ç:`;

        const response = await axios.post(
            'https://api-inference.huggingface.co/models/microsoft/DialoGPT-medium',
            {
                inputs: BRAND_INFO,
                parameters: {
                    max_length: 200,
                    temperature: 0.7
                }
            },
            {
                headers: { 
                    'Authorization': `Bearer ${HUGGING_FACE_TOKEN}` 
                },
                timeout: 10000
            }
        );

        if (response.data && response.data[0] && response.data[0].generated_text) {
            let answer = response.data[0].generated_text;
            // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            if (answer.includes('–û—Ç–≤–µ—Ç:')) {
                answer = answer.split('–û—Ç–≤–µ—Ç:')[1]?.trim();
            }
            return answer || getSimpleResponse(question);
        }
        
        return getSimpleResponse(question);
        
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:', error.message);
        return getSimpleResponse(question);
    }
}

// ===== –ü–†–û–°–¢–´–ï –û–¢–í–ï–¢–´ –ï–°–õ–ò –ù–ï–ô–†–û–°–ï–¢–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ =====
function getSimpleResponse(text) {
    text = text.toLowerCase();
    
    if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤')) {
        return '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ Mortem Vellum. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
    }
    if (text.includes('–¥–æ—Å—Ç–∞–≤')) {
        return 'üöö –î–æ—Å—Ç–∞–≤–∫–∞: –°–î–≠–ö, –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏, Boxberry (2-5 –¥–Ω–µ–π). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞ 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.';
    }
    if (text.includes('–æ–ø–ª–∞—Ç') || text.includes('—Ü–µ–Ω–∞')) {
        return 'üí≥ –û–ø–ª–∞—Ç–∞: –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂. –¶–µ–Ω—ã –æ—Ç 1500 –¥–æ 5000 —Ä—É–±–ª–µ–π.';
    }
    if (text.includes('–≥–∞—Ä–∞–Ω—Ç') || text.includes('–≤–æ–∑–≤—Ä–∞—Ç')) {
        return 'üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è 7 –¥–Ω–µ–π –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–∞–∫. –í–æ–∑–≤—Ä–∞—Ç –∑–∞ –Ω–∞—à —Å—á–µ—Ç –ø—Ä–∏ –Ω–∞—à–µ–π –æ—à–∏–±–∫–µ.';
    }
    if (text.includes('—Ä–∞–∑–º–µ—Ä')) {
        return 'üìè –†–∞–∑–º–µ—Ä—ã: S, M, L, XL. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã.';
    }
    if (text.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || text.includes('—Ç–µ–ª–µ—Ñ–æ–Ω')) {
        return 'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 900 099 52 43';
    }
    if (text.includes('–±—Ä–µ–Ω–¥') || text.includes('mortem')) {
        return 'üé≠ Mortem Vellum - –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ç–∞–º–∏.';
    }
    if (text.includes('–∫–æ–ª–ª–µ–∫—Ü') || text.includes('–æ–¥–µ–∂–¥')) {
        return 'üëï –•—É–¥–∏, —Ñ—É—Ç–±–æ–ª–∫–∏, —Å–≤–∏—Ç—à–æ—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–Ω—Ç–∞–º–∏. –ö–∞–∂–¥–∞—è –º–æ–¥–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Ç–∏—Ä–∞–∂–æ–º.';
    }
    
    return '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.';
}

// ===== –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô =====
bot.start((ctx) => {
    ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –±—Ä–µ–Ω–¥–∞ Mortem Vellum. üé≠\n\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—à–µ–π –æ–¥–µ–∂–¥–µ, –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ –æ–ø–ª–∞—Ç–µ - —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!\n\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá',
        userKeyboard
    );
});

bot.on('text', async (ctx) => {
    const userText = ctx.message.text;
    const userId = ctx.from.id;
    const userName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    if (userText === 'üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞') {
        // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        const userIndex = activeUsers.findIndex(u => u.id === userId);
        if (userIndex === -1) {
            activeUsers.push({
                id: userId,
                name: userName,
                timestamp: Date.now()
            });
        } else {
            activeUsers[userIndex].timestamp = Date.now();
        }

        const adminMessage = 
`üîî –ù–û–í–´–ô –ó–ê–ü–†–û–°!

üë§ ${userName}
üÜî ${userId}
‚è∞ ${new Date().toLocaleString('ru-RU')}

üí¨ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π:
/r${userId} –≤–∞—à —Ç–µ–∫—Å—Ç

üìã –ò–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫: /admin`;

        try {
            await bot.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage, adminKeyboard);
            await ctx.reply('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω! –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', userKeyboard);
        } catch (error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', userKeyboard);
        }
        return;
    }

    // –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    try {
        const response = await askAI(userText);
        await ctx.reply(response, userKeyboard);
        
    } catch (error) {
        const simpleResponse = getSimpleResponse(userText);
        await ctx.reply(simpleResponse, userKeyboard);
    }
});

// ===== –î–õ–Ø –ê–î–ú–ò–ù–ê =====

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.command('admin', (ctx) => {
    if (ctx.from.id.toString() !== ADMIN_CHAT_ID) {
        return ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    }
    
    showAdminPanel(ctx);
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function showAdminPanel(ctx) {
    let message = `üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n`;
    message += `üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.length}\n\n`;
    
    if (activeUsers.length > 0) {
        message += `üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤:\n`;
        activeUsers.forEach((user, index) => {
            const timeAgo = Math.round((Date.now() - user.timestamp) / 60000);
            message += `${index + 1}. ${user.name}\n`;
            message += `   üÜî ${user.id}\n`;
            message += `   ‚è∞ ${timeAgo} –º–∏–Ω. –Ω–∞–∑–∞–¥\n`;
            message += `   üí¨ /r${user.id} –≤–∞—à_—Ç–µ–∫—Å—Ç\n\n`;
        });
        message += `üí° –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rID —Ç–µ–∫—Å—Ç`;
    } else {
        message += `üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç`;
    }
    
    ctx.reply(message, adminKeyboard);
}

// –ö–æ–º–∞–Ω–¥–∞ /r –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
bot.hears(/^\/r(\d+)/, async (ctx) => {
    if (ctx.from.id.toString() !== ADMIN_CHAT_ID) return;
    
    const text = ctx.message.text;
    const match = text.match(/^\/r(\d+)\s+(.+)/);
    
    if (!match) {
        return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rID –≤–∞—à_—Ç–µ–∫—Å—Ç\n–ü—Ä–∏–º–µ—Ä: /r123456789 –ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?');
    }
    
    const userId = match[1];
    const message = match[2];
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIndex = activeUsers.findIndex(u => u.id == userId);
    if (userIndex === -1) {
        return ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö');
    }
    
    const userName = activeUsers[userIndex].name;
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.telegram.sendMessage(
            userId, 
            `üë®‚Äçüíº –û—Ç–≤–µ—Ç –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n${message}`,
            userKeyboard
        );
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        activeUsers.splice(userIndex, 1);
        
        await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${userName} (ID: ${userId})`, adminKeyboard);
        
    } catch (error) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ${userName}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`, adminKeyboard);
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        activeUsers.splice(userIndex, 1);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /remove –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.hears(/^\/remove(\d+)/, (ctx) => {
    if (ctx.from.id.toString() !== ADMIN_CHAT_ID) return;
    
    const text = ctx.message.text;
    const match = text.match(/^\/remove(\d+)/);
    
    if (match) {
        const userId = match[1];
        const userIndex = activeUsers.findIndex(u => u.id == userId);
        
        if (userIndex !== -1) {
            const userName = activeUsers[userIndex].name;
            activeUsers.splice(userIndex, 1);
            ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (ID: ${userId}) —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞`, adminKeyboard);
        } else {
            ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', adminKeyboard);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞
bot.on('text', async (ctx) => {
    if (ctx.from.id.toString() !== ADMIN_CHAT_ID) return;
    
    const text = ctx.message.text;
    
    // –ö–Ω–æ–ø–∫–∞ "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    if (text === 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π') {
        showAdminPanel(ctx);
        return;
    }
    
    // –ö–Ω–æ–ø–∫–∞ "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫"
    if (text === 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫') {
        activeUsers = [];
        await ctx.reply('‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω!', adminKeyboard);
        return;
    }
    
    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ (–Ω–µ –∫–æ–º–∞–Ω–¥—É)
    if (!text.startsWith('/')) {
        ctx.reply('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ /admin - –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n‚Ä¢ /rID —Ç–µ–∫—Å—Ç - –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n‚Ä¢ –ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ', adminKeyboard);
    }
});

// ===== –ó–ê–ü–£–°–ö =====
bot.launch().then(() => {
    console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    console.log('üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞: /admin, /rID —Ç–µ–∫—Å—Ç');
}).catch((error) => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
});

app.get('/', (req, res) => {
    res.send('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
